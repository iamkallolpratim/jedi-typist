{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","console","log","target","value","setState","isOn","typingWords","state","startTimer","incrementer","setInterval","secondsElapsed","clearTime","isOver","showScore","chars","paragraph","split","typingChars","wrightWords","filter","element","includes","wrongWords","correctMarks","parseInt","length","wrongMarks","resetGame","window","location","reload","react_default","a","createElement","Fragment","className","style","color","onClick","textAlign","rows","onChange","placeholder","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAoGeA,qBA/Fb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAYRQ,aAAe,SAACC,GACdC,QAAQC,IAAIF,EAAEG,OAAOC,OACrBZ,EAAKa,SAAS,CACZC,MAAK,EACLC,YAAcP,EAAEG,OAAOC,QAErBZ,EAAKgB,MAAMF,MACbd,EAAKiB,cApBUjB,EAwBnBiB,WAAa,WACXjB,EAAKkB,YAAcC,YAAa,kBAC9BnB,EAAKa,SAAS,CACZO,eAAgBpB,EAAKgB,MAAMI,eAAiB,KAE9C,MA7BepB,EAgCnBqB,UAAY,WACVrB,EAAKa,SAAS,CACZO,eAAgB,GAChBN,MAAO,EACPQ,QAAS,IAEXtB,EAAKuB,aAtCYvB,EAyCnBuB,UAAY,WAEV,IAAIC,EAAQxB,EAAKgB,MAAMS,UAAUC,MAAM,KACnCC,EAAc3B,EAAKgB,MAAMD,YAAYW,MAAM,KAC/CjB,QAAQC,IAAIiB,GAEZ,IAAMC,EAAcD,EAAYE,OAAO,SAAAC,GAAO,OAAIN,EAAMO,SAASD,KAC3DE,EAAaL,EAAYE,OAAO,SAAAC,GAAO,OAAKN,EAAMO,SAASD,KACjE9B,EAAKa,SAAS,CACZoB,aAAeC,SAA4B,GAAnBN,EAAYO,QACpCC,WAAaF,SAA2B,GAAlBF,EAAWG,WAnDlBnC,EA2DnBqC,UAAY,WACVC,OAAOC,SAASC,UA1DhBxC,EAAKgB,MAAQ,CACXI,eAAgB,GAChBN,MAAM,EACNQ,QAAS,EACTG,UAAY,8CACZV,YAAc,KACdkB,aAAe,EACfG,WAAa,GATEpC,wEAmEjB,OACEyC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBAER1C,KAAKa,MAAMM,OAWZmB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,2BAA0D,GAAvCxC,KAAKa,MAAMS,UAAUC,MAAM,KAAKS,QACnDM,EAAAC,EAAAC,cAAA,2BAAkBF,EAAAC,EAAAC,cAAA,QAAMG,MAAO,CAACC,MAAQ,YAAa5C,KAAKa,MAAMiB,eAChEQ,EAAAC,EAAAC,cAAA,6BAAoBF,EAAAC,EAAAC,cAAA,QAAMG,MAAO,CAACC,MAAQ,YAAa5C,KAAKa,MAAMoB,aAClEK,EAAAC,EAAAC,cAAA,UAAQE,UAAU,MAAMG,QAAS7C,KAAKkC,WAAtC,UAdFI,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACnBJ,EAAAC,EAAAC,cAAA,MAAIG,MAAO,CAACG,UAAU,WAA0C,IAA9B9C,KAAKa,MAAMI,eAAuBqB,EAAAC,EAAAC,cAAA,QAAMG,MAAO,CAACC,MAAM,QAAS5C,KAAKa,MAAMI,gBAAyBjB,KAAKkB,YAA1I,MACAoB,EAAAC,EAAAC,cAAA,KAAGE,UAAU,QACV1C,KAAKa,MAAMS,WAEdgB,EAAAC,EAAAC,cAAA,YAAUE,UAAU,WAAWK,KAAK,IAAIC,SAAUhD,KAAKI,aAAc6C,YAAY,uCAhF7EC,cCSEC,QACW,cAA7BhB,OAAOC,SAASgB,UAEe,UAA7BjB,OAAOC,SAASgB,UAEhBjB,OAAOC,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.624da3a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { \n      secondsElapsed: 30, \n      isOn :false,\n      isOver : false,\n      paragraph : 'The quick brown fox jumps over the lazy dog',\n      typingWords : null,\n      correctMarks : 0,\n      wrongMarks : 0\n    };\n  }\n\n  handleChange = (e) => {\n    console.log(e.target.value);\n    this.setState({\n      isOn:true,\n      typingWords : e.target.value\n    });\n    if(!this.state.isOn){\n      this.startTimer();\n    }\n  }\n\n  startTimer = () => {\n    this.incrementer = setInterval( () =>\n      this.setState({\n        secondsElapsed: this.state.secondsElapsed - 1,\n      })\n    , 1000);\n  }\n\n  clearTime = () => {\n    this.setState({\n      secondsElapsed: 60,\n      isOn : false,\n      isOver : true\n    })\n    this.showScore()\n  }\n\n  showScore = () => {\n  \n    let chars = this.state.paragraph.split(' ');\n    let typingChars = this.state.typingWords.split(' ')\n    console.log(typingChars);\n\n    const wrightWords = typingChars.filter(element => chars.includes(element));\n    const wrongWords = typingChars.filter(element => !chars.includes(element));\n    this.setState({\n      correctMarks : parseInt(wrightWords.length*10),\n      wrongMarks : parseInt(wrongWords.length*10)\n    })\n\n    \n  }\n\n\n\n  resetGame = () => {\n    window.location.reload();\n  }\n\n\n  \n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"flex-container\">\n            {\n              !this.state.isOver ? \n              <div>\n                  <div className=\"flex-item\">\n              <h1 style={{textAlign:'center'}}>{this.state.secondsElapsed !== 0 ? <span style={{color:'red'}}>{this.state.secondsElapsed}</span> : this.clearTime()} S</h1>\n              <p className=\"para\">\n                {this.state.paragraph}\n              </p>\n              <textarea className=\"textarea\" rows=\"5\" onChange={this.handleChange} placeholder=\"type the above sentence\"></textarea>\n            </div>\n              </div>\n              :\n              <div className=\"flex-item\">\n                <h2>Total Marks = {this.state.paragraph.split(' ').length*10}</h2>\n                <h2>Right Marks = <span style={{color : '#4CAF50'}}>{this.state.correctMarks}</span></h2>\n                <h2>Wrong Marks = - <span style={{color : '#E53935'}}>{this.state.wrongMarks}</span></h2>\n                <button className=\"btn\" onClick={this.resetGame}>reset</button>\n              </div>\n            }\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}